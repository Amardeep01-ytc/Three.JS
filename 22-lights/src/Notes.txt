Lights :
    Introduction :
        - Adding lights is as simple as adding meshes
        - We instantiate with the right class and add it to the scence
    SetUP :
        - We have Sphere,cube,Torus, Plane as the floor Same as MeshStandadMaterial for all
    
    Types of Light :
    1.Ambient light - 
        - Ambient light applies omnidirectional lighting
            color and intensity 
        - Ambientloght gives only directional lighting 
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5)
            scene.add(ambientLight)

            //Another way 
            const ambientLight = new THREE.AmbientLight()
            ambientLight.color = new THREE.Color(0xffffff)
            ambientLight.intensity =0.5
            scene.add(ambientLight)
        - We can add the properties to the Debug UI
            gui.add(ambientLight, 'intensity').min(0).max(0).step(0.001)
    
    2.Directional Light - 
        - The Directional light will have a sun-like effect as if the sun rays were travelling in parallel
            color and intensity
            const directionalLight = new THREE.DirectionalLight(0x00fffc, 0.3)
            scene.add(directionalLight)
        - To change the direction, move the light
            directionalLight.position.set(1, 0.25, 0)
    
    3.HemisphereLight - 
        - The HemisphereLight is similar to the AmbientLight but with a different color from the sky than the color coming from the ground
          color(or skyColor), groundColor and intensity 
            const hemisphereLight = new THREE.HemisphereLight(0xff0000, 0x0000ff, 0.3)
            scene.add(hemisphereLight)
    
    4.Point Light - 
        - The point light is almost like a lighter
        - The light starts at an infinitely small point and spreads uniformly in every directions
            const pointLight = new THREE.PointLight(0xff9000, 0.5)
            scene.add(pointLight)
        - We can move the light 
            pointLight.position.set(1, -0.5, 1)
        - By default, the light intensity doesn't fade
          We can control the fade distance and how fast it fades with distance and decay(dim light)
            const pointLight = new THREE.PointLight(0xff9000, 0.5, 10, 2)
        
    5.RectAreaLight - 
        - The RectAreaLight works like the big rectagle light, you can see on the photoshoot set 
        - It's a mix between a directional light and a diffuse light 
        - Paramaters includes color, intensity, width and height 
            const rectAreaLight = new THREE. RectAreaLight(0x4e00ff, 2, 1, 1)
            scene.add(rectAreaLight)   
        - RectAreaLight only works with MeshStandadMaterial and MeshPhysicalMaterial 
        - We can then move the light and rotate it, we can also use lookAt(..) to rotate more easily
            rectAreaLight.position.set(-1.5, 0, 1.5)
            rectAreaLight.lookAt(new THREE.Vector3())

    6. SpotLight -
        - The SpotLight is like a flashlight
        - It's a cone of light starting at a point and oriented in a direction
        - Paramaters includes color, intensity, distance, angle, penumbra, decay 
            const spotLight = new THREE.SpotLight(0x78ff00, 0.5, 10, Math.PI*0.1, 0.25, 1)
            spotLight.position.set(0, 2, 3)
            scene.add(spotLight) 
        - To rotate the SpotLight, we need to add it's target property to the scence and move it 
            scene.add(spotLight.target)
            spotLight.target.position.x = -0.75

    Performances - 
        - Lights can costs a lot when it comes to Performances
        - Try to add as few lights as possible and try to use the lights that cost less
        Minimal cost - Ambient lights and Hemisphere Light
        Moderate cost - Directional Light and Point Light
        High cost - Spot Light and RectAreaLight
     
    Baking - 
        - The idea is to bake the light into the textures
        - This can be done in a 3D software
        - The drawback is that we cannot move the light anymore and we have to load huge textures

    Helpers - 
        - To assist us with positioning the lights, we can use Helpers
            * HemisphereLightHelper
            * DirectionalLightHelper
            * PointLightHelper
            * RectAreaLightHelper
            * SpotLightHelper
        const hemisphereLightHelper = new THREE.HemisphereLightHelper(hemisphereLight, 0.2)
        scene.add(hemisphereLightHelper)

        const directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight, 0.2)
        scene.add(directionalLightHelper)

        const pointLightHelper = new THREE.PointLightHelper(pointLight, 0.3)
        scene.add(pointLightHelper)

        - The SpotLightHelper has no size 
          we also need to call its update(..) method on the next frame after moving the target 
            const spotLightHelper = new THREE.SpotLightHelper(spotLight)
            scene.add(spotLightHelper)
            window.requestAnimationFrame(()=>
            {
                spotLightHelper.update()
            })  

        - RectAreaLightHelper isn't part of the THREE variable and we must import  it
            import { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js'
            //...
            const rectAreaLightHelper = new RectAreaLightHelper(rectAreaLight)
            scene.add(rectAreaLightHelper)  
          We need to update it on the next frame ans also update its position and rotation manually
                  
