Hounted House ->
- Introduction :
    - We only use Three.js primitives as geometries and the textures in the /static/textures/ folder
    
- Tips for measurement :
    - Insted of using random measures we are going to consider 1 unit as 1 meter

- SetUp :
    - A floor
    - Sphere
    - Some Lights (too intense)
    - no shadow
    - A Dat.GUI panel 

- The House :
    - Remove the Sphere 
- Create a House group: 
    const house = new THREE.Group()
    scene.add(house)

- Create the walls 
     const walls = new THREE.Mesh(
    new THREE.BoxBufferGeometry(4, 2.5, 4),
    new THREE.MeshStandardMaterial({color :'#ac8e82'})
    )
    walls.position.y = 2.5 / 2
    house.add(walls)

- Create the roof with a pyramid 
    To create a pyramid,we can use a ConeBufferGeometry
    const roof = new THREE.Mesh(
    new THREE.ConeBufferGeometry(3.5, 1, 4),
    new THREE.MeshStandardMaterial({color:'#b35f35'})
    )
    roof.position.y =  2.5 + 0.5 //height of walls + height of roof
    roof.rotation.y =  Math.PI * 0.25
    house.add(roof)

- Create the door with a plane. we will use the door texture later
    const door = new THREE.Mesh(
    new THREE.PlaneBufferGeometry(2,2),
    new THREE.MeshStandardMaterial({color: '#aa7b7b'})
    )
    door.position.y = 1
    door.position.z = 2 + 0.01 //half of the wall's z index
    house.add(door)

- Add bushes and use the same geometry and some material for every bushes
    const bushGeometry = new THREE.SphereBufferGeometry(1, 16, 16)
    const bushMaterial = new THREE.MeshStandardMaterial({color:'#89c854'})

    const bush1 = new THREE.Mesh(bushGeometry, bushMaterial)
    bush1.scale.set (0.5, 0.5, 0.5)
    bush1.position.set (0.8, 0.2, 2.2)

    const bush2 = new THREE.Mesh(bushGeometry, bushMaterial)
    bush2.scale.set (0.25, 0.25, 0.25)
    bush2.position.set (1.4, 0.2, 2.1 )

    const bush3 = new THREE.Mesh(bushGeometry, bushMaterial)
    bush3.scale.set (0.4, 0.4, 0.4)
    bush3.position.set (-0.8, 0.1, 2.2)

    const bush4 = new THREE.Mesh(bushGeometry, bushMaterial)
    bush4.scale.set (0.15, 0.15, 0.15)
    bush4.position.set (-1, 0.05, 2.6)

    house.add(bush1, bush2, bush3, bush4)

- Add the Graves (kind of stones) : 
    - Insted of placing each grave manually, we are going to create and place them procedurally 
        const graves = new THREE.Group()
        scene.add(graves)
    
    - Create one BoxBufferGeometry and one MeshStandardMaterial that we will use for every grave meshes 
        const graveGeometry = new THREE.BoxBufferGeometry(0.6, 0.8, 0.2)
        const graveMaterial = new THREE.MeshStandardMaterial({color:'#b2b6b1'}) 
    
    - Create the graves all around the House
        const graves = new THREE.Group()
        scene.add(graves)

        for(let i = 0; i < 50 ; i++){
        const graveGeometry = new THREE.BoxBufferGeometry(0.6, 0.8, 0.2)
        const graveMaterial = new THREE.MeshStandardMaterial({color:'#b2b6b1'}) 
        const angle = Math.random() * Math.PI *2 //random angle
        const radius = 3 + Math.random() *6 //Random Radius
        const x = Math.sin(angle) * radius
        const z = Math.cos(angle) * radius

        //create the mesh 
        const grave = new THREE.Mesh(graveGeometry, graveMaterial)

        //position
        grave.position.set (x, 0.3, z)

        //rotation
        grave.rotation.y = (Math.random() -0.5) * 0.4
        grave.rotation.z = (Math.random() -0.5) * 0.4

        //Add to the graves container
        graves.add(grave)
        }
    
    - Add Lights :
        - Dim the ambiemnt light and moon light aand give those a more blue-ish color
            const ambiemntLight = new THREE.Ambientlight('#b9d5ff', 0.12)
            //...
            const moonLight = new THREE.DirectionalLight(''#b9d5ff', 0.12 )

        - Add a warm Pointlight above the door and add it to the house instead of the scene
            const doorLight = new THREE.PointLight('#ff7d46', 1, 7)
            doorLight.position.set(0, 2.2, 2.7)
            house.add(doorLight)             

    - Fog :
        - Three.js supports fog with the fog Class
        - color
        - Near - how far from the camera does the fog start 
        - Far - how far from the camera will the fog ne fully oapque
            const fog = new THREE.Fog('#262837', 1, 15) 
            scene.fog = fog
        - To fix yhe background, we must change the clear color of the renderer and use the same color as the fog. We can do it with the setColor(...) on the renderer
            renderer.setClearColor('#262837')
    
    - Textures :
        Door - 
            -Load all the Door textures
            const textureLoader = new THREE.TextureLoader()
            const doorColorTexture = textureLoader.load('/textures/door/color.jpg')
            const doorAlphaTexture = textureLoader.load('/textures/door/alpha.jpg')
            const doorAmbientOcclusionTexture = textureLoader.load('/textures/door/ambientOcclusion.jpg')
            const doorHeightTexture = textureLoader.load('/textures/door/height.jpg')
            const doorNormalTexture = textureLoader.load('/textures/door/normal.jpg')
            const doorMetalnessTexture = textureLoader.load('/textures/door/metalness.jpg')
            const doorRoughnessTexture = textureLoader.load('/textures/door/roughness.jpg')
            
            - Apply them to the door, add subdivisions to the geometry and don't forget the uv2 attribute to support the aoMap
                const door = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(2,2, 100, 100),
                new THREE.MeshStandardMaterial({
                map: doorColorTexture,
                transparent: true,
                alphaMap: doorAlphaTexture,
                aoMap: doorAmbientOcclusionTexture,
                displacementMap: doorHeightTexture,
                displacementScale: 0.1,
                normalMap: doorNormalTexture,
                metalnessMap: doorMetalnessTexture,
                roughnessMap: doorRoughnessTexture 
                })

                door.geometry.setAttribute(
                'uv2',new THREE.Float32BufferAttribute(door.geometry.attributes.uv.array, 2)
                )
            - Increase the size of the door
                //...
                new THREE.PlaneBufferGeometry(2.2, 2.2, 100, 100)
                //...
    - The walls :
        - Load the brick Textures   
            const brickColorTexture = textureLoader.load('/textures/bricks/color.jpg')
            const brickAmbientOcclusionTexture = textureLoader.load('/textures/bricks/ambientOcclusion.jpg')
            const brickNormalTexture = textureLoader.load('/textures/bricks/normal.jpg')
            const brickRoughnessTexture = textureLoader.load('/textures/bricks/roughness.jpg')

        - Apply them to walls and dont forget the uv2   
            const walls = new THREE.Mesh(
            new THREE.BoxBufferGeometry(4, 2.5, 4),
            new THREE.MeshStandardMaterial({
            map: brickColorTexture,
            aoMap: brickAmbientOcclusionTexture,
            normalMap: brickNormalTexture,
            roughnessMap: brickRoughnessTexture
            })
        )
            walls.geometry.setAttribute(
                'uv2',new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array, 2)
            )
    
    - The Floor :
        - Load the grass textures
            const grassColorTexture = textureLoader.load('/textures/grass/color.jpg')
            const grassAmbientOcclusionTexture = textureLoader.load('/textures/grass/ambientOcclusion.jpg')
            const grassNormalTexture = textureLoader.load('/textures/grass/normal.jpg')
            const grassRoughnessTexture = textureLoader.load('/textures/grass/roughness.jpg')
        
        - Apply them to plane and dont forget the uv2
            const floor = new THREE.Mesh(
            new THREE.PlaneBufferGeometry(20, 20),
            new THREE.MeshStandardMaterial({ 
                map:grassColorTexture,
                aoMap:grassAmbientOcclusionTexture,
                normalMap:grassNormalTexture,
                roughnessMap: grassRoughnessTexture
            })
            )
            floor.geometry.setAttribute(
            'uv2', new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array, 2)
            )
        
        - Play with the repeat of the grass textures    
            grassColorTexture.repeat.set(8 ,8)
            grassAmbientOcclusionTexture.repeat.set(8 ,8)
            grassNormalTexture.repeat.set(8 ,8)
            grassRoughnessTexture.repeat.set(8 ,8)
          This will give us a very strange result because the textures never repeat 
        
        - Change the wrapS and wrapT properties to activate the repeat 
            grassColorTexture.wrapS = THREE.RepeatWrapping
            grassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping
            grassNormalTexture.wrapS = THREE.RepeatWrapping
            grassRoughnessTexture.wrapS = THREE.RepeatWrapping

            grassColorTexture.wrapT = THREE.RepeatWrapping
            grassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping
            grassNormalTexture.wrapT = THREE.RepeatWrapping
            grassRoughnessTexture.wrapT = THREE.RepeatWrapping
        
    - Ghosts :
        - We are not going to create real Ghosts
        - Insted,we are going to represent  them simple lights floating around the house and passing through the ground and graves  
            const ghost1 = new THREE.PointLight('#ff00ff', 2, 3)
            scene.add(ghost1)
           
            const ghost2 = new THREE.PointLight('#ff00ff', 2, 3)
            scene.add(ghost2)
           
            const ghost3 = new THREE.PointLight('#ff00ff', 2, 3)
            scene.add(ghost3)
        
        - The problem is ghosts are exists but within the house so we want to animate them inside the tick function
                const ghost1Angle = elapsedTime * 0.5
                ghost1.position.x = Math.cos(ghost1Angle) * 4
                ghost1.position.z = Math.sin(ghost1Angle) * 4
                ghost1.position.y = Math.sin(elapsedTime * 3)
    
                const ghost2Angle = - elapsedTime * 0.2
                ghost2.position.x = Math.cos(ghost2Angle) * 5
                ghost2.position.z = Math.sin(ghost2Angle) * 5
                ghost2.position.y = Math.sin(elapsedTime * 4) + Math.sin(elapsedTime * 2.5)

                const ghost3Angle = elapsedTime * 0.18
                ghost3.position.x = Math.cos(ghost3Angle) * (7 + Math.sin(elapsedTime * 0.32))
                ghost3.position.z = Math.sin(ghost3Angle) * (7 + Math.sin(elapsedTime * 0.5))
                ghost3.position.y = Math.sin(elapsedTime * 4) + Math.sin(elapsedTime * 2.5) 
    
    - Shadows :
        - For even realistic look
        - Activate the sadow map on the renderer
            renderer.shadowMap.enabled = true
        - Activate the Shadowson the lights that should cast Shadows
            renderer.shadowMap.enabled = true
            moonLight.castShadow = true
            doorLight.castShadow = true
            ghost1.castShadow = true
            ghost2.castShadow = true
            ghost3.castShadow = true
        - Go through each object of your scene and decide if that object can cast and/or recieve shadow
            walls.castShadow = true
            bush1.castShadow = true
            bush2.castShadow = true
            bush3.castShadow = true
            bush4.castShadow = true

            - ADD into the Grave's loop
            for(let i=0 ; i < 50 ; i++)
            {
                //....
                grave.castShadow = true
                //....
            }
        - For the recieving of shadow onto the floor
            floor.receivingShadow = true
        -We need to optimize the shadow maps 
            