Shadows :
Introduction - 
    - Now that we have lights, we want shadows 
    - The dark shadow in the back of the objects are called core Shadows. What we are missing are the drop shadows
    - Shadows have always been a challange for real-time 3D rendering, and developers must find tricks to display realistic shadows at a reasonable frame rate 
    - Three.js has a built-in solution. Its not perfect but its convenient
        
    How It Works - 
    - When you do one render, Three.js will do a render for each light supporting shadows
    - Those renders will simulate what the light sees as if it was a camera
    - During these lights renders, a MeshDepthMaterial replaces all mashes materials
    - The lights renders are stored as textures and we call those shadow maps
    - They are then used on every materials supposed to recieve shadows and projected on the geometry 
    
    How to Activate Shadows - 
    - Activate the shadow maps on the renderer
        renderer.shadowMap.enabled = true
    - Go through each object and decide if it can cast a shadow with castShadow and if it can recieve shadow with recieveShadow
        sphere.castShadow = true

        //..
        plane.recieveShadow = true
    
    - Only the following types of lights support shadows
        * PointLight
        * DirectionalLight 
        * SpotLight
    - Activate the shadows on the light with the castShadow
        directionalLight.castShadow = true

    Shadow Map Optimizations -
        Render Size :
            - We can access the shadow map in the shadow property of each light 
                console.log(directionalLight.shadow)
            - By default, the shadow map size is 512x512 
              We can improve it but keep a power of 2 for the mipmapping

        Near and Far :
            - Three.js is using cameras to do the shadow maps renders. Those cameras have the same properties like near and Far
            - To help us debug, we can use a CameraHelper with the camera used for the shadow map located in the DirectionalLight.shadow.camera
                const directionalLightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera)
                scene.add(directionalLightCameraHelper)
            - Now we can find decent near and Far
                directionalLight.shadow.camera.near = 1
                directionalLight.shadow.camera.far = 6 

        Amplitude :
            - With the camera helper we can see that the amplitude is too large 
            - Because we are using a DirectionalLight, THREE.js is using an OrthographicCamera
            - We can control how far on each side the camera can see with top,right,bottom and left 
                directionalLight.shadow.camera.top = 2
                directionalLight.shadow.camera.right = 2
                directionalLight.shadow.camera.bottom = -2
                directionalLight.shadow.camera.left = -2
            - The smaller the values, the more precisee the shadow will be. If it's too small, the shadows will be cropped
            - We can hide the camera helper 
                directionalLightCameraHelper.visible = false

        BLUR :
            - We can control the shadow blur with the radius property
                directionalLight.shadow.radius = 10 
            - This technic doesn't use the proximity of the camera with the object, its a general and cheap blur

      **Shadow Map Algorithm :
            Different types algorithms can be applied to shadow maps
            * THREE.BasicShadowMap - Very performant but lousy quality
            * THREE.PCFShadowMap - Less performant but smoother edges (default)
            * THREE.PCFSoftShadowMap - Less performant but even softer edges 
            * THREE.VSMShadowMap - Less performant, more constraints, can have unexpected results 

            - Update the renderer.shadowMap.type
                renderer.shadowMap.type = THREE.PCFSoftShadowMap
            - The radius doesnt work wit THREE.PCFSoftShadowMap
        
      **SpotLight :
            - Add a SpotLight
                const spotLight = new THREE.SpotLight(0xffffff, 0.4, 10, Math.PI * 0.3)
                spotLight.castShadow = true
                spotLight.position.set(0, 2, 2)      
                scene.add(spotLight)        
                scene.add(spotLight.target) 

            - Add a camera helper  
                const spotLightCameraHelper = new THREE.CameraHelper(spotLight.shadow.camera)
                scene.add(spotLightCameraHelper)

            - Reduce the other lights intensity 
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.4)
                //...
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.4)

            - Mixing shadows doesnt look good and there is not much to do about it.
              but we can improve the shadow quality using the same technics that we used for the directional Light
            - change the shadow.mapSize
                spotLight.shadow.mapSize.width = 1024
                spotLight.shadow.mapSize.height = 1024 
            - Because we are using a SpotLight, THREE.js is using a PerspectiveCamera
              We must change the fov (field of view) property to adapt the amplitude
                spotLight.shadow.camera.fov = 30 
            - Change the near and far values
                spotLight.shadow.camera.near = 1
                spotLight.shadow.camera.far = 6
            - We can hide the camera helper 
                spotLightCameraHelper.visible =false

      **PointLight :
            - Add a PointLight
                const pointLight = new THREE.PointLight(0xffffff, 0.3)

                pointLight.castShadow = true

                pointLight.position.set(-1, 1, 0)
                scene.add(pointLight)         
            - Add a camera helper
                const pointLightCameraHelper = new THREE.CameraHelper(pointLight.shadow.camera)
                scene.add(pointLightCameraHelper)
            - Reduce the other light intensity
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.3)
                //...
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.3)
            - The camera helper seems to be PerspectiveCamera facing downward 
               Three.js uses a PerspectiveCamera but in all 6 directions and finishes downward
            - We can tweak the mapSize, near and far    
                pointLight.shadow.mapSize.width = 1024
                pointLight.shadow.mapSize.height = 1024
                pointLight.shadow.camera.near= 0.1
                pointLight.shadow.camera.far = 5
            - Hide the camera helper 
                pointLightCameraHelper.visible = false
                  
        Baking Shadows :
            - A good alternative to Three.js shadows is baked shadows. We intergate shadows in the textures that we apply on materials
            - Deactivate all shadows from the renderer
                renderer.shadowMap.enabled = false
            - Load the Shadows 
                const textureLoader = new THREE.TextureLoader()
                const bakedShadow = textureLoader.load('/textures/bakedShadow.jpg')
            - Instead of MeshStandardMaterial use a MeshBasicMaterial on the plane material with the bakedShadow
                const plane = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(5, 5),
                // material
                new THREE.MeshBasicMaterial({map: bakedShadow})
                )
            
        Baking Shadow Alternative :
            - We can use a more simpler baked shadow and move it so it stays under the sphere
            - Put back the MeshBasicMaterial on the plane 
                const plane = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(5, 5),
                material  
                )
            - Load the basic shadow texture located in /static/textures/backShadow.jpg
                const simpleShadow = textureLoader.load('/textures/simpleShadow.jpg')
            - Create a plane slightly above the floor with an alphaMap using the simpleShadow
                const sphereShadow = new THREE.Mesh(
                new THREE.PlaneBufferGeometry(1.5, 1.5),
                new THREE.MeshBasicMaterial ({
                    color : 0x000000,
                    transparent : true,
                    alphaMap : simpleShadow
                })
                )
                sphereShadow.rotation.x = - Math.PI * 0.5
                sphereShadow.position.y = plane.position.y + 0.01
                scene.add(sphereShadow)

            - Animate the sphere in the tick function 
                const tick = () =>
                {
                    const elpasedTime = clock.getElapsedTime()

                    //Update the sphere
                    sphere.position.x = Math.cos(elpasedTime) * 1.5
                    sphere.position.z = Math.cos(elpasedTime) * 1.5
                    sphere.position.y = Math.abs(Math.sin(elpasedTime * 3))
                    
                    //...
                } 
            - Animate the shadow in the tick function
                const tick = () =>
                {
                    //Update the shadow
                    sphereShadow.position.x = sphere.position.x
                    sphereShadow.position.z = sphere.position.z
                    sphereShadow.material.opacity = (1 - sphere.position.y) * 0.3
                    
                    //...
                }
            
            Which technique to use 
            - Finding the right solution to handle shadows is up to you. It depends on the project,the performances and the techniques you know. and we can also combine tham 
            

